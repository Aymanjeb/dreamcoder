#!/bin/bash

# Sample script that calls taskRankGraphs.py to create graphs of ECResult metrics from results with a recognitionTaskMetrics dict.
# Note: clustering requires a container with sklearn installed.

module add openmind/singularity

batched='/om2/user/zyzzyva/ec/data/expertiseFigures/addLogProductions/rationalb2/rational_aic=1.0_arity=3_BO=True_CO=True_ET=120_HR=0.5_it=20_MF=5_baseline=False_pc=30.0_RT=3600_RR=False_RW=False_storeTask=True_L=1.0_batch=10_taskReranker=randomShuffle_K=2_topkNotMAP=False_rec=True_feat=FeatureExtractor_graph=True.pickle'

singularity exec -B /om2  sklearn-container.img \
  python taskRankGraphs.py --checkpoints   $batched    --experimentNames rationalb2 \
 	--metricsToCluster expectedProductionUses --export data/expertiseFigures/rationalb2/ --tsneLearningRate 300 --labelWithImages 1\

singularity exec -B /om2  sklearn-container.img \
  python taskRankGraphs.py --checkpoints   $batched    --experimentNames rationalb2 \
 	--metricsToCluster hiddenState --export data/expertiseFigures/rationalb2/ --tsneLearningRate 300 --labelWithImages 1\

singularity exec -B /om2  sklearn-container.img \
  python taskRankGraphs.py --checkpoints   $batched    --experimentNames rationalb2 \
 	--metricsToCluster contextualLogProductions --export data/expertiseFigures/rationalb2/ --tsneLearningRate 300 --labelWithImages 1\



# singularity exec -B /om2  sklearn-container.img \
#   python taskRankGraphs.py --checkpoints   $old_checkpoint1 $checkpoint1 $checkpoint7  --experimentNames old1 DreamLogo DreamLogo\
#  	--metricsToCluster hiddenState --export data/expertiseFigures/featureExtractor/ --tsneLearningRate 250 --labelWithImages 1\


# singularity exec -B /om2  sklearn-container.img \
#   python taskRankGraphs.py --checkpoints   $old_checkpoint1 $checkpoint1 $checkpoint7  --experimentNames old1 DreamLogo DreamLogo\
#  	--metricsToCluster contextualLogProductions --export data/expertiseFigures/featureExtractor/ --tsneLearningRate 250 --labelWithImages 1\

