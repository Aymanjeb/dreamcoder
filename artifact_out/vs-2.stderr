WARNING: Could not import torch. This is only okay when doing pypy compression.
WARNING: Could not import np. This is only okay when doing pypy compression.
Failure loading recognition - only acceptable if using pypy 
WARNING: Could not import torch. This is only okay when doing pypy compression.
WARNING: Could not import np. This is only okay when doing pypy compression.
Failure loading recognition - only acceptable if using pypy 
WARNING: Could not import torch. This is only okay when doing pypy compression.
WARNING: Could not import np. This is only okay when doing pypy compression.
Failure to load pregex. This is only acceptable if using pypy
Failure to load pregex. This is only acceptable if using pypy
WARNING: Could not import torch. This is only okay when doing pypy compression.
WARNING: Could not import torch. This is only okay when doing pypy compression.
WARNING: Could not import np. This is only okay when doing pypy compression.
WARNING: Could not import recognition. This is only okay when doing pypy compression.
WARNING: Could not import torch. This is only okay when doing pypy compression.
WARNING: Could not import np. This is only okay when doing pypy compression.
WARNING: Could not import torch. This is only okay when doing pypy compression.
WARNING: Could not import np. This is only okay when doing pypy compression.
DEPRECATION NOTICE: this module (dreamcoder.ec) will be deleted soon, please update your code to import from dreamcoder.dreamcoder instead



RUNNING 1 2
Inducing a grammar from 18 frontiers
-227.32257531380174 48.4
Starting grammar induction score -297.7225753138017
constructed 1-step version spaces in 0.3 seconds
Enumerated 17098 distinct version spaces
[32m 96 sec 467 pops 12305 utility calculations best found so far:
	 (lambda (#(lambda (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $1 (lambda (lambda (cons ($2 $0) $1))) empty))) $0 (lambda (?1 $0)))) : (t0 -> t1) -> list(t0) -> list(t1) 
utility 3.089999999999998 (adjusted from 3.089999999999998) probabilistic score 0.0 structure penalty 49.7 [0m

[33m 110 sec 556 pops 14611 utility calculations best found so far:
	 (lambda (#(lambda (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $1 (lambda (lambda (cons ($2 $0) $1))) empty))) $0 ?1)) : (t0 -> t1) -> list(t0) -> list(t1) 
utility 2.0699999999999985 (adjusted from 2.0699999999999985) probabilistic score 0.0 structure penalty 49.6 [0m

[33m 112 sec 579 pops 15199 utility calculations best found so far:
	 (lambda (car (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) (#(#(lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (fix1 $3 (lambda (lambda (if ($2 $0) empty (cons ($3 $0) ($1 ($4 $0))))))))))) $1 (lambda ($3 $0 1)) (lambda $0) (lambda (eq? $0 $1)))))) (lambda (lambda (+ $1 $0))) 0) ?1) (lambda (lambda (cdr $1))) $0))) : int -> list(t0) -> t0 
utility 2.0599999999999987 (adjusted from 2.0599999999999987) probabilistic score 0.0 structure penalty 52.699999999999996 [0m

[33m 125 sec 681 pops 17878 utility calculations best found so far:
	 (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $0 (lambda (lambda (?1 $0 $1))) ?2)) : t0 -> (t1 -> t0 -> t0) -> list(t1) -> t0 
utility 0.03999999999999915 (adjusted from 0.03999999999999915) probabilistic score 0.0 structure penalty 49.9 [0m

[33m 126 sec 690 pops 18092 utility calculations best found so far:
	 (lambda (+ $0 ?1)) : int -> int -> int 
utility 0.02999999999999936 (adjusted from 0.02999999999999936) probabilistic score 0.0 structure penalty 49.6 [0m

[33m 127 sec 691 pops 18092 utility calculations best found so far:
	 (car (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) (#(#(lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (fix1 $3 (lambda (lambda (if ($2 $0) empty (cons ($3 $0) ($1 ($4 $0))))))))))) $1 (lambda ($3 $0 1)) (lambda $0) (lambda (eq? $0 $1)))))) (lambda (lambda (+ $1 $0))) 0) ?1) (lambda (lambda (cdr $1))) ?2)) : list(t0) -> int -> t0 
utility 0.02999999999999936 (adjusted from 0.02999999999999936) probabilistic score 0.0 structure penalty 52.699999999999996 [0m

[33m 131 sec 699 pops 18278 utility calculations best found so far:
	 (lambda (#(lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $0 (lambda (lambda (+ 1 $1))) 0)) $0)) : list(t0) -> int 
utility 0.019999999999999574 (adjusted from 0.019999999999999574) probabilistic score 0.0 structure penalty 49.5 [0m

Utility can be improved by 3.089999999999998
New library function occurs in 4 MAP solutions:
map length 	 (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $1 (lambda (lambda (cons ($2 $0) $1))) empty))) $0 (lambda ($2 $0))))) #(lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $0 (lambda (lambda (+ 1 $1))) 0)))
map double 	 (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $1 (lambda (lambda (cons ($2 $0) $1))) empty))) $0 (lambda ($2 $0))))) (lambda (+ $0 $0)))
map increment 	 (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $1 (lambda (lambda (cons ($2 $0) $1))) empty))) $0 (lambda ($2 $0))))) (+ 1))
map negation 	 (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $1 (lambda (lambda (cons ($2 $0) $1))) empty))) $0 (lambda ($2 $0))))) (- 0))

constructed 1-step version spaces in 0.2 seconds
Enumerated 16434 distinct version spaces
[32m 77 sec 461 pops 12626 utility calculations best found so far:
	 (lambda (lambda (car (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (fix1 $3 (lambda (lambda (if ($2 $0) empty (cons ($3 $0) ($1 ($4 $0))))))))))) $1 (lambda ($3 $0 1)) (lambda $0) (lambda (eq? $0 $1)))))) (lambda (lambda (- $1 $0))) ($1 $0) $0))) (lambda $2) ?1) (lambda (lambda (cdr $1))) $0)))) : int -> int -> list(t0) -> t0 
utility 3.0699999999999985 (adjusted from 3.0699999999999985) probabilistic score 0.0 structure penalty 54.1 [0m

[33m 87 sec 541 pops 14787 utility calculations best found so far:
	 (lambda (car (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) (#(#(lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (fix1 $3 (lambda (lambda (if ($2 $0) empty (cons ($3 $0) ($1 ($4 $0))))))))))) $1 (lambda ($3 $0 1)) (lambda $0) (lambda (eq? $0 $1)))))) (lambda (lambda (+ $1 $0))) 0) ?1) (lambda (lambda (cdr $1))) $0))) : int -> list(t0) -> t0 
utility 2.0599999999999987 (adjusted from 2.0599999999999987) probabilistic score 0.0 structure penalty 54.0 [0m

[33m 88 sec 552 pops 15055 utility calculations best found so far:
	 (lambda (car (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) ?1 (lambda (lambda (cdr $1))) $0))) : list(t0) -> list(t1) -> t1 
utility 2.0599999999999987 (adjusted from 2.0599999999999987) probabilistic score 0.0 structure penalty 53.0 [0m

[33m 99 sec 653 pops 17793 utility calculations best found so far:
	 (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $0 (lambda (lambda (?1 $0 $1))) ?2)) : t0 -> (t1 -> t0 -> t0) -> list(t1) -> t0 
utility 0.03999999999999915 (adjusted from 0.03999999999999915) probabilistic score 0.0 structure penalty 51.199999999999996 [0m

[33m 99 sec 659 pops 17932 utility calculations best found so far:
	 (car (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) (#(#(lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (fix1 $3 (lambda (lambda (if ($2 $0) empty (cons ($3 $0) ($1 ($4 $0))))))))))) $1 (lambda ($3 $0 1)) (lambda $0) (lambda (eq? $0 $1)))))) (lambda (lambda (+ $1 $0))) 0) ?1) (lambda (lambda (cdr $1))) ?2)) : list(t0) -> int -> t0 
utility 0.02999999999999936 (adjusted from 0.02999999999999936) probabilistic score 0.0 structure penalty 54.0 [0m

Utility can be improved by 3.0699999999999985
New library function occurs in 2 MAP solutions:
index int 	 (#(lambda (lambda (lambda (car (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (fix1 $3 (lambda (lambda (if ($2 $0) empty (cons ($3 $0) ($1 ($4 $0))))))))))) $1 (lambda ($3 $0 1)) (lambda $0) (lambda (eq? $0 $1)))))) (lambda (lambda (- $1 $0))) ($1 $0) $0))) (lambda $2) $2) (lambda (lambda (cdr $1))) $0))))) 0)
1-index int 	 (#(lambda (lambda (lambda (car (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (fix1 $3 (lambda (lambda (if ($2 $0) empty (cons ($3 $0) ($1 ($4 $0))))))))))) $1 (lambda ($3 $0 1)) (lambda $0) (lambda (eq? $0 $1)))))) (lambda (lambda (- $1 $0))) ($1 $0) $0))) (lambda $2) $2) (lambda (lambda (cdr $1))) $0))))) 1)

constructed 1-step version spaces in 0.1 seconds
Enumerated 15792 distinct version spaces
[32m 82 sec 476 pops 13557 utility calculations best found so far:
	 (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $0 (lambda (lambda (?1 $0 $1))) ?2)) : t0 -> (t1 -> t0 -> t0) -> list(t1) -> t0 
utility 0.03999999999999915 (adjusted from 0.03999999999999915) probabilistic score 0.0 structure penalty 55.6 [0m

[33m 93 sec 535 pops 15207 utility calculations best found so far:
	 (+ 1) : int -> int 
utility 0.009999999999999787 (adjusted from 0.009999999999999787) probabilistic score 0.0 structure penalty 56.1 [0m

Utility can be improved by 0.03999999999999915
New library function occurs in 2 MAP solutions:
sum 	 (#(lambda (lambda (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $0 (lambda (lambda ($3 $0 $1))) $2)))) 0 +)
append constant 0 	 (#(lambda (lambda (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $0 (lambda (lambda ($3 $0 $1))) $2)))) (cons (- 1 1) empty) cons)

constructed 1-step version spaces in 0.1 seconds
Enumerated 15315 distinct version spaces
[32m 63 sec 429 pops 12541 utility calculations best found so far:
	 (+ 1) : int -> int 
utility 0.009999999999999787 (adjusted from 0.009999999999999787) probabilistic score 0.0 structure penalty 57.6 [0m

Utility can be improved by 0.009999999999999787
New library function occurs in 2 MAP solutions:
range inclusive 	 (lambda (#(#(lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (fix1 $3 (lambda (lambda (if ($2 $0) empty (cons ($3 $0) ($1 ($4 $0))))))))))) $1 (lambda ($3 $0 1)) (lambda $0) (lambda (eq? $0 $1)))))) (lambda (lambda (+ $1 $0))) 0) (#(+ 1) $0)))
map increment 	 (#(lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $1 (lambda (lambda (cons ($2 $0) $1))) empty))) $0 (lambda ($2 $0))))) #(+ 1))

constructed 1-step version spaces in 0.1 seconds
Enumerated 14984 distinct version spaces
No invention looks promising so we are done
new primitives:
int -> int 	 #(+ 1)
t0 -> (t1 -> t0 -> t0) -> list(t1) -> t0 	 #(lambda (lambda (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $0 (lambda (lambda ($3 $0 $1))) $2))))
int -> int -> list(t0) -> t0 	 #(lambda (lambda (lambda (car (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) (#(lambda (lambda (#(lambda (lambda (lambda (#(lambda (lambda (lambda (lambda (fix1 $3 (lambda (lambda (if ($2 $0) empty (cons ($3 $0) ($1 ($4 $0))))))))))) $1 (lambda ($3 $0 1)) (lambda $0) (lambda (eq? $0 $1)))))) (lambda (lambda (- $1 $0))) ($1 $0) $0))) (lambda $2) $2) (lambda (lambda (cdr $1))) $0)))))
(t0 -> t1) -> list(t0) -> list(t1) 	 #(lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (fix1 $2 (lambda (lambda (if (empty? $0) $2 ($3 ($1 (cdr $0)) (car $0))))))))) $1 (lambda (lambda (cons ($2 $0) $1))) empty))) $0 (lambda ($2 $0)))))
465.7119972705841 seconds



