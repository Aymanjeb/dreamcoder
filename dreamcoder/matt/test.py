import pathlib
from dreamcoder.matt.util import *
import sys
import torch

from dreamcoder.matt.sing import sing
from fastcore.basics import ifnone


def main(test_cfg):
    """
    At this point `test_cfg` is the cfg generated by hydra when we launched this test run
        and `sing.cfg` is the loaded model's cfg. `sing` as a whole is loaded model version
        (so that any references to it during search will resolve properly).
    """

    test = test_cfg.test

    if test.out is None:
        test.out = test_cfg.full_name + '.res' # time.job.run.res
    
    if test.from_file is None:
        die('Error: missing argument test.from_file')
    
    apply_test_overrides(test_cfg) 
    
    # load tests
    path = with_ext(testgen_path() / test.from_file, 'tgen')
    if not path.exists():
        die(f'Error: cant find testgen file: {path}')
    tgen = torch.load(path, pickle_module=dill)

    fs = tgen.fs
    if test.max_tasks is not None:
        fs = fs[:test.max_tasks]
    
    model_result = sing.model.search(fs, test.timeout, verbose=True)
    model_result.save(test.out)


def apply_test_overrides(test_cfg):
    """
    override `sing.cfg` using parts of test_cfg that were present in the argv overrides
    """
    overrided = [arg.split('=')[0] for arg in sys.argv[1:]]


    blacklisted_keypath_suffixes = ('data.','model.')
    allowed_exceptions = ()

    for keypath in overrided:
      if cfg_get(test_cfg,keypath) == cfg_get(sing.cfg,keypath):
        continue # if theyre already equal then no worries

      if any(keypath.startswith(k) for k in blacklisted_keypath_suffixes):
        # yes it is blacklisted
        if keypath not in allowed_exceptions:
            # not it is not an allowed exception
            red(f'keypath `{keypath}` is not in whitelisted overrides. Modify in sing.py:Sing.apply_overrides()')
            if test_cfg.check_overrides:
                sys.exit(1)


      """
      If you want any custom behavior for an override, put it here
      """

      # if we got this far we're allowed to set the sing.cfg
      val = cfg_get(test_cfg,keypath)
      cfg_set(sing.cfg,keypath,val) # override it





def cfg_diff(train_cfg,test_cfg):
    mlb.magenta("Differences between train and test:")
    for key in set(test_cfg.keys()) | set(train_cfg.keys()):
        if key in ['threaded', 'num_templates', 'valid_frac', 'buf_size', 'repeat', 'print_data']:
            continue #ignore these
        if key not in test_cfg:
            mlb.yellow(f"warn: key not in test data config: {key}")
            continue
        elif key not in train_cfg:
            mlb.yellow(f"warn: key not in train data config: {key}")
            continue
        if test_cfg[key] != train_cfg[key]:
            mlb.magenta(mlb.mk_bold(f"\t{key=} {train_cfg[key]=} {test_cfg[key]=}"))

